import{_ as o,r as s,o as c,c as l,e as t,b as n,d as a,a as i}from"./app-CPRXW8Yf.js";const u={},k=n("h1",{id:"snackbar",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#snackbar"},[n("span",null,"Snackbar")])],-1),r=i(`<p>The snackbar store will display your own components as &quot;snacks&quot;/&quot;toasts&quot;.</p><h2 id="modal-container" tabindex="-1"><a class="header-anchor" href="#modal-container"><span>Modal container</span></a></h2><p>Import and add the <code>SnackContainer</code> in your <code>App.vue</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> SnackContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-haystack&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SnackContainer</span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="snack" tabindex="-1"><a class="header-anchor" href="#snack"><span>Snack</span></a></h2><h3 id="creating-a-snack" tabindex="-1"><a class="header-anchor" href="#creating-a-snack"><span>Creating a snack</span></a></h3><p>You will need to write your own snack components, as a very simple example (<code>MySnack.vue</code>):</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">padding</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> white</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>My snack content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>From withing a snack, you can call <code>useSnack()</code> that provides a <code>close</code> function. This also allows you to pass data if needed.</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useSnack <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-haystack&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> snack <span class="token operator">=</span> <span class="token function">useSnack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
snack<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// with data</span>
snack<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// you can explicitely type the data (this does not affect \`onClose\` unfortunately)</span>
snack<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">close</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A snack also has a <code>timer</code> property that allows reading and manipulating the lifetime of the snack.</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> snack <span class="token operator">=</span> <span class="token function">useSnack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// remaining time</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>snack<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>remainingTime<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// lifetime value between 1 and 0, you can use this to show a progress bar or something similar</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>snack<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>progress<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// absolute lifetime</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>snack<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// pause timer</span>
snack<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// resume timer</span>
snack<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// stop/reset the timer</span>
snack<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="showing-a-snack" tabindex="-1"><a class="header-anchor" href="#showing-a-snack"><span>Showing a snack</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useSnackbar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-haystack&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> MySnack <span class="token keyword">from</span> <span class="token string">&quot;./MySnack.vue&quot;</span><span class="token punctuation">;</span>

<span class="token function">useSnackbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>MySnack<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>push</code> allows you to pass props, event listeners and modal options.</p><p>A snack receives a <code>time</code> option in milliseconds. It will be closed automatically after the specified time.</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">useSnackbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
  MySnack<span class="token punctuation">,</span>
  <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// props</span>
  <span class="token punctuation">{</span> <span class="token function-variable function">log</span><span class="token operator">:</span> <span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// listeners</span>
  <span class="token punctuation">{</span> time<span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// options</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>push</code> also returns an object with an <code>onClose</code> function to react to close events. If using typescript, set the generic type <code>onClose</code> so the <code>data</code> parameter is properly typed.</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">useSnackbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>MySnack<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token generic-function"><span class="token function">onClose</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyDataType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// data will be undefined if the modal is closed without data, e.g. when it is closed by clicking the overlay</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="customization" tabindex="-1"><a class="header-anchor" href="#customization"><span>Customization</span></a></h2><p>By default, the container uses flexbox to display snacks in the top right corner. You can override the styles of the container if you want to display them centered, for example:</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SnackContainer</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can also customize the component rendering of each snack in the <code>SnackContainer</code>.</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SnackContainer</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{snack, activeModal}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span>
      <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>snack.component<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>snack.id<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>snack.props<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>snack.listeners<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SnackContainer</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),d=n("code",null,"SnackContainer",-1),v={href:"https://github.com/jshmrtn/vue-haystack/blob/master/src/snackbar/SnackContainer.vue",target:"_blank",rel:"noopener noreferrer"};function m(g,b){const e=s("SnackbarDemo"),p=s("ExternalLinkIcon");return c(),l("div",null,[k,t(e,{style:{margin:"2rem 0 2rem 0"}}),r,n("p",null,[a("If you need more control (e.g. custom animations), you can implement your own "),d,a(". The default component is relatively simple and can be used as "),n("a",v,[a("template"),t(p)]),a(".")])])}const y=o(u,[["render",m],["__file","snackbar.html.vue"]]),f=JSON.parse('{"path":"/snackbar.html","title":"Snackbar","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Modal container","slug":"modal-container","link":"#modal-container","children":[]},{"level":2,"title":"Snack","slug":"snack","link":"#snack","children":[{"level":3,"title":"Creating a snack","slug":"creating-a-snack","link":"#creating-a-snack","children":[]},{"level":3,"title":"Showing a snack","slug":"showing-a-snack","link":"#showing-a-snack","children":[]}]},{"level":2,"title":"Customization","slug":"customization","link":"#customization","children":[]}],"git":{},"filePathRelative":"snackbar.md"}');export{y as comp,f as data};
